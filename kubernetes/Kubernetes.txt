Kubernetes 
----------------------------
Service가 만들어진 이유 - pod들이 모종의 이유로 삭제되고 재생성될 때마다 주소가 변경됨.
주소가 변경되지 않아 언제든 access할 수 있는 resource를 생각해냄
service 생성시 pod의 container  port와 service targetport 동일해야하고
labels 값도 동일해야함.
Service 종류
---------
ClusterIP 
cluster 혹은 namespace 내부에서 서로 isloation 되어있는 container들 간의 통신을 위해 만들어짐 
cluster 내부의 특정 private ip에 접속하기 위해서는 private ip address와 containerPort num 필요 
pod자체의 ip address를 통한 접근 시 containerPort, Service ip address 접근시 해당 port 필요clusterport, nodeport
---------
NodePort
cluster 내부의 resource들을 외부 ip를 통해 접근하기 위해 만들어짐 일종의 NAT(network address translation) 기능
public ip address와 nodeport num 필요 
--------
Deployment, ReplicaSet, pods 의미
각각의 상관관계와 각 object 생성 후 api가 관찰하여 object를 생성하고 생성할 때 controller 및 스케쥴러가 실 객체 생성
이 때 활용되는 API 는 RestfulAPI 이것의 기능 확인하기.
---------
kubectl 의미
kubernetes와 api간 규칙을 연결해주는 CLI SW 
각각의 명령어와 실습 외우기
kubectl run
kubectl create -f [.yaml] 
kubectl apply -f [.yaml]
kubectl delete -f [.yaml]
kubectl delete [resource] [resource name]
kubectl describe [resource] [resource name]
kubectl exec -it [pod name] -- /bin/bash
kubectl expose deploy [deploy name] --type=[NP, CP] --name=[Service name] --port=[portnum] --target-port=[]
kubectl scale (deploy, rs) [name] --replicas=(num)
-------
kubernetes의 각 요소들과 의미
kubernetes 구성
Master & Node
Master - 
API Server - usr 및 내부 노드, 외부 restfulapi와 통신, 
controller manager - 다양한 컨트롤러 관리 및 api server와 통신
scheduler - requested wokload를 어느 노드에 배치할지 경정 kubelet과 통신으로 상황 파악 결정
etcd - 여러 커맨드들을 저장해놓고 읽어와서 명령어 실행 (작업 보드)
Node-
PoD로 불리는 기본 컨테이너가 운영되는 서버
kubelet - api-server와 통신하는 node상의 관리 에이전트
kube proxy - node network management program
kubectl - 명령어 도구로서 restfulapi가 알아들을 수 있는 http 기반 command로 변형해주는 CLI SW
-----------------
kubernetes 설계 principle
1.declarative api rahter than imperative - state 정보 declare
2.controlpane is transparent no hidden APIs
3.meet users where they are - 기존에 사용하던 프로그램들을 쉽게 k8s인프라로 사용될 수 있게 하는 것. remote sorage
4.portablity 
------------------


-----------
Virtualization- hypervisor가 하는 일
물리적인 자원을 추상화하여 논리적자원으로 사용하게 하는 것
1. Host-os상에 있는 경우 
virtualbox vmware desktop qemu 등
2. 하드웨어(cpu)가 가상화를 지원 
Hyper-V KVM 등
전가상화와 반가상화
반가상화를 통해 일부를 가상화하여 qemu kvm 동시 운영가능
virtualization management lib - libvirt
---------------
hypervisor -vm과 container의 차이와 장단점비교 
1. vm - host os 위에 guest os 설치
2. container-namespace cgroup기술 활용
namespace- 그룹별 독자적인 공간 만드는 것
cgroup- 프로세스 그룹 cpu 메모리 등 시스템 자원 격리
Pros.
프로세스별로 동작 - 간단 geust os가 불필요해서 가벼움 자원관리 이득 portablity, scalablity declarative
cons.
host os에 종속적임 컨테이너별 커널 구성 x
---------------

openStack 각 요소 노드 관리방법 등
Nova - [compute] project 하이퍼바이저 관리 api vm(instance) 생성 관리
glance - [image]
keystone - [id/pass] 
swift - [storage]
horizon - [Gui/dashboard]
quanturn,neutron - [network]
Cinder - 블록 스토리지(하드디스크)
Swift - 오브젝트 스토리지
Manila - 공유 파일 스토리지
heat - orchestration
ironic - [bare metal]

상용적 storage service 가 뭐인지 - ceph 오픈스택 프로젝트가 아닌 분산 스토리지
vm flavor instance router의 기능
flavor - 생성할 인스턴스의 spec 들을 결정하는 것
namespace cgroup이 무엇인지
리눅스 커널상의 리소스 분리 관리 개념으로 각각의 namespace는 독자적이고 고립적인 작업 환경 및 네트워트를 갖는다.
또한 cgroup은 cpu 메모리 등의 리소스를 분할하여 사용자들이 모든 시스템 리소스를 사용하지 않도록한다.
